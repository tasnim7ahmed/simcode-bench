#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"
#include "ns3/internet-module.h"
#include "ns3/on-off-application.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/ssid.h"
#include "ns3/energy-module.h"
#include "ns3/command-line.h"
#include <iostream>
#include <fstream>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("WifiAdhocEnergy");

static void
NodeSleep(std::string context, uint32_t nodeId)
{
  NS_LOG_UNCOND (context << " Node " << nodeId << " sleeps");
}


int
main (int argc, char *argv[])
{
  bool verbose = false;
  double simulationTime = 10;
  std::string dataRate ("11Mbps");
  uint32_t packetSize = 1024;
  uint32_t numPackets = 1000;
  double txPowerStart = 20.0;
  double txPowerEnd = 20.0;
  double txPowerStep = 0.0;
  double initialEnergy = 100.0;
  double txCurrentA = 0.08;
  double rxCurrentA = 0.05;
  double sleepCurrentA = 0.00001;
  double idleCurrentA = 0.00005;

  CommandLine cmd;
  cmd.AddValue ("verbose", "Tell application to log if set.", verbose);
  cmd.AddValue ("simulationTime", "Simulation time in seconds.", simulationTime);
  cmd.AddValue ("dataRate", "Data rate of OnOff application", dataRate);
  cmd.AddValue ("packetSize", "Packet size of OnOff application", packetSize);
  cmd.AddValue ("numPackets", "Number of packets generated by OnOff application", numPackets);
  cmd.AddValue ("txPowerStart", "Starting transmit power in dBm", txPowerStart);
  cmd.AddValue ("txPowerEnd", "Ending transmit power in dBm", txPowerEnd);
  cmd.AddValue ("txPowerStep", "Transmit power step in dBm", txPowerStep);
  cmd.AddValue ("initialEnergy", "Initial energy in Joules", initialEnergy);
  cmd.AddValue ("txCurrentA", "Transmit current in Amperes", txCurrentA);
  cmd.AddValue ("rxCurrentA", "Receive current in Amperes", rxCurrentA);
  cmd.AddValue ("sleepCurrentA", "Sleep current in Amperes", sleepCurrentA);
  cmd.AddValue ("idleCurrentA", "Idle current in Amperes", idleCurrentA);

  cmd.Parse (argc, argv);

  if (verbose)
    {
      LogComponentEnable ("WifiAdhocEnergy", LOG_LEVEL_INFO);
    }

  NodeContainer nodes;
  nodes.Create (2);

  WifiHelper wifi;
  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);

  YansWifiPhyHelper wifiPhy =  YansWifiPhyHelper::Default ();
  YansWifiChannelHelper wifiChannel = YansWifiChannelHelper::Default ();
  wifiPhy.SetChannel (wifiChannel.Create ());

  WifiMacHelper wifiMac;
  wifiMac.SetType ( "ns3::AdhocWifiMac" );
  Ssid ssid = Ssid ("ns-3-ssid");
  wifiMac.Set("Ssid", SsidValue (ssid));

  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);

  MobilityHelper mobility;
  mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                 "MinX", DoubleValue (0.0),
                                 "MinY", DoubleValue (0.0),
                                 "DeltaX", DoubleValue (5.0),
                                 "DeltaY", DoubleValue (10.0),
                                 "GridWidth", UintegerValue (3),
                                 "LayoutType", StringValue ("RowFirst"));
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (nodes);

  InternetStackHelper internet;
  internet.Install (nodes);

  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfaces = ipv4.Assign (devices);

  OnOffHelper onoff ("ns3::UdpSocketFactory",
                     Address (InetSocketAddress (interfaces.GetAddress (1), 9)));
  onoff.SetConstantRate (DataRate (dataRate), packetSize);
  onoff.SetAttribute ("PacketSize", UintegerValue (packetSize));
  onoff.SetAttribute ("MaxBytes", UintegerValue (numPackets * packetSize));

  ApplicationContainer apps = onoff.Install (nodes.Get (0));
  apps.Start (Seconds (1.0));
  apps.Stop (Seconds (simulationTime + 1));

  // Energy Model
  BasicEnergySourceHelper basicSourceHelper;
  basicSourceHelper.Set ("InitialEnergyJ", DoubleValue (initialEnergy));

  WifiRadioEnergyModelHelper radioEnergyHelper;
  radioEnergyHelper.Set ("TxCurrentA", DoubleValue (txCurrentA));
  radioEnergyHelper.Set ("RxCurrentA", DoubleValue (rxCurrentA));
  radioEnergyHelper.Set ("SleepCurrentA", DoubleValue (sleepCurrentA));
  radioEnergyHelper.Set ("IdleCurrentA", DoubleValue (idleCurrentA));
  radioEnergyHelper.Set ("TxPowerStart", DoubleValue (txPowerStart));
  radioEnergyHelper.Set ("TxPowerEnd", DoubleValue (txPowerEnd));
  radioEnergyHelper.Set ("TxPowerStep", DoubleValue (txPowerStep));

  EnergySourceContainer sources = basicSourceHelper.Install (nodes);
  DeviceEnergyModelContainer deviceModels = radioEnergyHelper.Install (devices, sources);

  for (uint32_t i = 0; i < deviceModels.GetN (); ++i)
    {
      Ptr<DeviceEnergyModel> deviceEnergyModel = deviceModels.Get (i);
      deviceEnergyModel->TraceConnectWithoutContext ("RemainingEnergy",
                                                     "energy-trace.txt");
      deviceEnergyModel->TraceConnectWithoutContext ("CurrentState",
                                                     "state-trace.txt");
    }

  Ptr<EnergySource> source = sources.Get (0);
  source->TraceConnect ("RemainingEnergy", "energy-source-trace.txt");
  source->SetNodeSleepCallback (MakeBoundCallback (&NodeSleep, 0));


  Simulator::Stop (Seconds (simulationTime + 2));

  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}