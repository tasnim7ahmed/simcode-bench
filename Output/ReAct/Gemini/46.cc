#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"
#include "ns3/energy-module.h"
#include "ns3/internet-module.h"
#include "ns3/on-off-application.h"
#include "ns3/udp-echo-client.h"
#include "ns3/udp-echo-server.h"
#include "ns3/command-line.h"
#include "ns3/flow-monitor-module.h"
#include <iostream>
#include <fstream>
#include <string>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("WifiAdhocEnergy");

Ptr<OutputStreamWrapper> energyTrace;
Ptr<OutputStreamWrapper> stateTrace;

void
DeviceEnergyStateChanged (std::string context,
                         Ptr<NetDevice> device,
                         EnergySource::State state)
{
  *stateTrace->GetStream () << Simulator::Now ().GetSeconds () << " " << device->GetNode ()->GetId () << " " << state << std::endl;
}

void
RemainingEnergy (std::string context, double remainingEnergy)
{
  *energyTrace->GetStream () << Simulator::Now ().GetSeconds () << " " << remainingEnergy << std::endl;
}


int main (int argc, char *argv[])
{
  bool verbose = false;
  double simulationTime = 10;
  std::string dataRate = "11Mbps";
  uint32_t packetSize = 1024;
  double txPowerStart = 10.0;
  double txPowerEnd = 20.0;
  double txPowerLevels = 2;

  double basicEnergyConsumption = 0.01;
  double txEnergyConsumption = 0.05;
  double rxEnergyConsumption = 0.03;
  double idleEnergyConsumption = 0.001;
  double sleepEnergyConsumption = 0.0001;

  CommandLine cmd;
  cmd.AddValue ("verbose", "Tell application to log if true", verbose);
  cmd.AddValue ("simulationTime", "Simulation time in seconds", simulationTime);
  cmd.AddValue ("dataRate", "Data rate for the OnOffApplication", dataRate);
  cmd.AddValue ("packetSize", "Size of packets generated by the OnOffApplication", packetSize);
  cmd.AddValue ("txPowerStart", "Minimum transmit power (dBm)", txPowerStart);
  cmd.AddValue ("txPowerEnd", "Maximum transmit power (dBm)", txPowerEnd);
  cmd.AddValue ("txPowerLevels", "Number of transmit power levels", txPowerLevels);
  cmd.AddValue ("basicEnergyConsumption", "Basic Energy Consumption", basicEnergyConsumption);
  cmd.AddValue ("txEnergyConsumption", "TX Energy Consumption", txEnergyConsumption);
  cmd.AddValue ("rxEnergyConsumption", "RX Energy Consumption", rxEnergyConsumption);
  cmd.AddValue ("idleEnergyConsumption", "Idle Energy Consumption", idleEnergyConsumption);
  cmd.AddValue ("sleepEnergyConsumption", "Sleep Energy Consumption", sleepEnergyConsumption);
  cmd.Parse (argc, argv);

  if (verbose)
    {
      LogComponentEnable ("WifiAdhocEnergy", LOG_LEVEL_INFO);
    }

  NodeContainer nodes;
  nodes.Create (2);

  WifiHelper wifi;
  wifi.SetStandard (WIFI_PHY_STANDARD_80211b);

  YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default ();
  YansWifiChannelHelper wifiChannel = YansWifiChannelHelper::Default ();
  wifiPhy.SetChannel (wifiChannel.Create ());

  WifiMacHelper wifiMac;
  wifiMac.SetType ("ns3::AdhocWifiMac");
  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, nodes);

  MobilityHelper mobility;
  mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                 "MinX", DoubleValue (0.0),
                                 "MinY", DoubleValue (0.0),
                                 "DeltaX", DoubleValue (5.0),
                                 "DeltaY", DoubleValue (10.0),
                                 "GridWidth", UintegerValue (3),
                                 "LayoutType", StringValue ("RowFirst"));
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (nodes);

  InternetStackHelper internet;
  internet.Install (nodes);

  Ipv4AddressHelper ipv4;
  ipv4.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfaces = ipv4.Assign (devices);

  OnOffHelper onoff ("ns3::UdpSocketFactory",
                     Address (InetSocketAddress (interfaces.GetAddress (1), 9)));
  onoff.SetConstantRate (DataRate (dataRate));
  onoff.SetPacketSize (packetSize);

  ApplicationContainer apps = onoff.Install (nodes.Get (0));
  apps.Start (Seconds (1.0));
  apps.Stop (Seconds (simulationTime));

  UdpEchoServerHelper echoServer (9);
  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
  serverApps.Start (Seconds (0.0));
  serverApps.Stop (Seconds (simulationTime));


  EnergySourceContainer sources = EnergySourceHelper::Install (nodes, BasicEnergySourceHelper ());

  double increment = (txPowerEnd - txPowerStart) / (txPowerLevels -1);

  for (double txPower = txPowerStart; txPower <= txPowerEnd + 0.0001; txPower += increment)
  {
    Ptr<WifiRadioEnergyModel> radioModel = CreateObject<WifiRadioEnergyModel> ();
    radioModel->SetTxCurrentA (txEnergyConsumption);
    radioModel->SetRxCurrentA (rxEnergyConsumption);
    radioModel->SetIdleCurrentA (idleEnergyConsumption);
    radioModel->SetSleepCurrentA (sleepEnergyConsumption);

    Config::Set ("/NodeList/*/DeviceList/*/$ns3::WifiNetDevice/EnergyModel", PointerValue (radioModel));
    wifiPhy.Set ("TxPowerStart", DoubleValue (txPower));
    wifiPhy.Set ("TxPowerEnd", DoubleValue (txPower));
    Ptr<BasicEnergySource> basicSource = DynamicCast<BasicEnergySource> (sources.Get (0));
    basicSource->SetInitialEnergy (100.0);
    basicSource = DynamicCast<BasicEnergySource> (sources.Get (1));
    basicSource->SetInitialEnergy (100.0);
    std::stringstream traceFilename;
    traceFilename << "energy-trace-" << txPower << ".txt";
    AsciiTraceHelper asciiTraceHelper;
    energyTrace = asciiTraceHelper.CreateFileStream (traceFilename.str().c_str());

    Simulator::Schedule (Seconds (0.01), &RemainingEnergy, "First Node", basicSource->GetRemainingEnergy ());
    basicSource->TraceConnectWithoutContext ("RemainingEnergy", MakeCallback (&RemainingEnergy));

    std::stringstream stateFilename;
    stateFilename << "state-trace-" << txPower << ".txt";
    stateTrace = asciiTraceHelper.CreateFileStream (stateFilename.str().c_str());

    Config::Connect ("/NodeList/*/DeviceList/*/EnergySource/State", MakeCallback (&DeviceEnergyStateChanged));

    Simulator::Stop (Seconds (simulationTime));
    Simulator::Run ();
    Simulator::Destroy ();
    *energyTrace->GetStream () << Simulator::Now ().GetSeconds () << std::endl;
    *stateTrace->GetStream () << Simulator::Now ().GetSeconds () << std::endl;
  }

  return 0;
}